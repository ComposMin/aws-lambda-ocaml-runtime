module Constants = struct
  let runtime_api_version = "2018-06-01"
  let api_content_type = "application/json"
  let api_error_content_type = "application/vnd.aws.lambda.error+json"
  let runtime_error_header = "Lambda-Runtime-Function-Error-Type"

  module Headers = struct
    let request_id = "Lambda-Runtime-Aws-Request-Id"
    let function_arn = "Lambda-Runtime-Invoked-Function-Arn"
    let trace_id = "Lambda-Runtime-Trace-Id"
    let deadline = "Lambda-Runtime-Deadline-Ms"
    let client_context = "Lambda-Runtime-Client-Context"
    let cognito_identity = "Lambda-Runtime-Cognito-Identity"
  end
end

type client_application = {
    (* The mobile app installation id *)
    installation_id: string [@key "installationId"];
    (* The app title for the mobile app as registered with AWS' mobile services. *)
    app_title: string [@key "appTitle"];
    (* The version name of the application as registered with AWS' mobile services. *)
    app_version_name: string [@key "appVersionName"];
    (* The app version code. *)
    app_version_code: string [@key "appVersionCode"];
    (* The package name for the mobile application invoking the function *)
    app_package_name: string [@key "appPackageName"];
}
[@@deriving yojson]

type client_context = {
  (* Information about the mobile application invoking the function. *)
  client: client_application;
  (* Custom properties attached to the mobile event context. *)
  custom: Yojson.Safe.json;
  (* Environment settings from the mobile client. *)
  environment: Yojson.Safe.json;
}
[@@deriving yojson]

(* Cognito identity information sent with the event *)
type cognito_identity = {
  (* The unique identity id for the Cognito credentials invoking the function. *)
  identity_id: string;
  (* The identity pool id the caller is "registered" with. *)
  identity_pool_id: string;
}
[@@deriving yojson]

type event_context = {
  (* The ARN of the Lambda function being invoked. *)
  invoked_function_arn: string;
  (* The AWS request ID generated by the Lambda service. *)
  aws_request_id: string;
  (* The X-Ray trace ID for the current invocation. *)
  xray_trace_id: string;
  (* The execution deadline for the current invocation in nanoseconds. *)
  deadline: int64;
  (* The client context object sent by the AWS mobile SDK. This field is
  empty unless the function is invoked using an AWS mobile SDK. *)
  client_context: client_context option;
  (* The Cognito identity that invoked the function. This field is empty
  unless the invocation request to the Lambda APIs was made using AWS
  credentials issues by Amazon Cognito Identity Pools. *)
  identity: cognito_identity option;
}
[@@deriving yojson]

type t = string

let make endpoint =
  endpoint

let make_runtime_post_request uri output =
  let open Cohttp in
  let open Cohttp_lwt in
  let open Cohttp_lwt_unix in
  let body = Yojson.Safe.to_string output in
  Client.call
    ~headers:(Header.init_with "content-type" Constants.api_content_type)
    ~body:(Body.of_string body)
    `POST
    uri

let event_response client request_id output =
  let open Cohttp in
  let open Cohttp_lwt_unix in
  let uri = Uri.of_string
    (Printf.sprintf
      "http://%s/%s/runtime/invocation/%s/response"
      client Constants.runtime_api_version request_id)
  in
  let req = make_runtime_post_request uri output
  in
  try
    let { Response.status }, _ = Lwt_main.run req in
    let code = Code.code_of_status status in
    if not (Code.is_success code) then
      Error (Errors.make_api_error ~recoverable:false (Printf.sprintf "Error %d while sending response" code))
    else
      Ok ()
  with
  | _ ->
    let err = Errors.make_api_error
      ~recoverable:false
      (Printf.sprintf "Error when calling runtime API for request %s" request_id)
    in
    Error err

let make_runtime_error_request uri error =
  let open Cohttp in
  let open Cohttp_lwt in
  let open Cohttp_lwt_unix in
  let body = Errors.to_json error |> Yojson.Safe.to_string in
  Client.call
    ~headers:(Header.of_list
              ["content-type", Constants.api_error_content_type;
               Constants.runtime_error_header, "RuntimeError"])
    ~body:(Body.of_string body)
    `POST
    uri

let event_error client request_id err =
  let open Cohttp in
  let open Cohttp_lwt_unix in
  let uri = Uri.of_string
    (Printf.sprintf
      "http://%s/%s/runtime/invocation/%s/error"
      client Constants.runtime_api_version request_id)
  in
  let req = make_runtime_error_request uri err in
  try
    let { Response.status }, _ = Lwt_main.run req in
    let code = Code.code_of_status status in
    if not (Code.is_success code) then
      Error (Errors.make_api_error ~recoverable:true (Printf.sprintf "Error %d while sending response" code))
    else
      Ok ()
  with
  | _ ->
    let err = Errors.make_api_error
      ~recoverable:true
      (Printf.sprintf "Error when calling runtime API for request %s" request_id)
    in
    Error err

let fail_init client err =
  let uri = Uri.of_string
    (Printf.sprintf
      "http://%s/%s/runtime/init/error" client Constants.runtime_api_version)
  in
  let req = make_runtime_error_request uri err in
  try
    let _ = Lwt_main.run req in
    ()
  with
  | _ -> failwith "Error while sending init failed message"

let get_event_context headers =
  let report_error header =
    let err = Errors.make_api_error
      ~recoverable:true
      (Printf.sprintf "Missing %s header" header)
    in
    Error err
  in
  let open Cohttp in
  let open Constants in
  match Header.get headers Headers.request_id with
  | None -> report_error Headers.request_id
  | Some aws_request_id ->
    begin match Header.get headers Headers.function_arn with
    | None -> report_error Headers.function_arn
    | Some invoked_function_arn ->
      begin match Header.get headers Headers.trace_id with
      | None -> report_error Headers.trace_id
      | Some xray_trace_id ->
        begin match Header.get headers Headers.deadline with
        | None -> report_error Headers.deadline
        | Some deadline_str ->
          let deadline = Int64.of_string deadline_str in
          let client_context = match Header.get headers Headers.client_context with
          | None -> None
          | Some ctx_json_str ->
            let ctx_json = Yojson.Safe.from_string ctx_json_str in
            begin match client_context_of_yojson ctx_json with
            | Error _ -> None
            | Ok client_ctx -> Some client_ctx
            end
          in
          let identity = match Header.get headers Headers.cognito_identity with
          | None -> None
          | Some cognito_json_str ->
            let cognito_json = Yojson.Safe.from_string cognito_json_str in
            begin match cognito_identity_of_yojson cognito_json with
            | Error _ -> None
            | Ok cognito_identity -> Some cognito_identity
            end
          in
          let ctx = {
            aws_request_id;
            invoked_function_arn;
            xray_trace_id;
            deadline;
            client_context;
            identity;
          }
          in Ok ctx
        end
      end
    end

let next_event client =
  let open Cohttp in
  let open Cohttp_lwt_unix in
  let uri = Uri.of_string
    (Printf.sprintf "http://%s/%s/runtime/invocation/next" client Constants.runtime_api_version)
  in
  Printf.printf "Polling for next event. Uri: %s\n" (Uri.to_string uri);
  try
    (*
     * Blocking for now. Lambdas can't process two events at the same time
     * anyway.
     *)
    let { Response.status; headers }, body = Lwt_main.run (Client.get uri) in
    let code = Code.code_of_status status in
    if Code.is_client_error code then begin
      Logs.err (fun m ->
        m "Runtime API returned client error when polling for new events %d\n" code);
      let err = Errors.make_api_error
        ~recoverable:true
        (Printf.sprintf "Error %d when polling for events" code)
      in
      Error err
    end else if Code.is_server_error code then begin
      Logs.err (fun m ->
        m "Runtime API returned server error when polling for new events %d\n" code);
      let err = Errors.make_api_error
        ~recoverable:false
        "Server error when polling for new events"
      in
      Error err
    end else begin
      match get_event_context headers with
      | Error x as err ->
        Logs.err (fun m ->
          m "Failed to get event context: %s\n" (x |> Errors.to_json |> Yojson.Safe.to_string));
        err
      | Ok ctx ->
        let body_str = Lwt_main.run (Cohttp_lwt.Body.to_string body) in
        Ok (body_str, ctx)
      end
  with
  | _ ->
    let err = Errors.make_api_error
      ~recoverable:false
      "Server error when polling for new events"
    in
    Error err
